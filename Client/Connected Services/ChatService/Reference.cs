//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ChatService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthenticationUserInfo", Namespace="http://schemas.datacontract.org/2004/07/letsTalk")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Client.ChatService.ServerUserInfo))]
    public partial class AuthenticationUserInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string LoginField;
        
        private string PasswordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerUserInfo", Namespace="http://schemas.datacontract.org/2004/07/letsTalk")]
    [System.SerializableAttribute()]
    public partial class ServerUserInfo : Client.ChatService.AuthenticationUserInfo {
        
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SqlIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SqlId {
            get {
                return this.SqlIdField;
            }
            set {
                if ((this.SqlIdField.Equals(value) != true)) {
                    this.SqlIdField = value;
                    this.RaisePropertyChanged("SqlId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LoginExceptionFault", Namespace="http://schemas.datacontract.org/2004/07/letsTalk")]
    [System.SerializableAttribute()]
    public partial class LoginExceptionFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NicknameExceptionFault", Namespace="http://schemas.datacontract.org/2004/07/letsTalk")]
    [System.SerializableAttribute()]
    public partial class NicknameExceptionFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthorizationExceptionFault", Namespace="http://schemas.datacontract.org/2004/07/letsTalk")]
    [System.SerializableAttribute()]
    public partial class AuthorizationExceptionFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConnectionExceptionFault", Namespace="http://schemas.datacontract.org/2004/07/letsTalk")]
    [System.SerializableAttribute()]
    public partial class ConnectionExceptionFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StreamExceptionFault", Namespace="http://schemas.datacontract.org/2004/07/letsTalk")]
    [System.SerializableAttribute()]
    public partial class StreamExceptionFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="letsTalk.IFileService", ConfigurationName="ChatService.File")]
    public interface File {
        
        // CODEGEN: Generating message contract since the wrapper name (DownloadRequest) of message DownloadRequest does not match the default value (AvatarDownload)
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IFileService/File/AvatarDownload", ReplyAction="letsTalk.IFileService/File/AvatarDownloadResponse")]
        Client.ChatService.DownloadFileInfo AvatarDownload(Client.ChatService.DownloadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IFileService/File/AvatarDownload", ReplyAction="letsTalk.IFileService/File/AvatarDownloadResponse")]
        System.Threading.Tasks.Task<Client.ChatService.DownloadFileInfo> AvatarDownloadAsync(Client.ChatService.DownloadRequest request);
        
        // CODEGEN: Generating message contract since the operation AvatarUpload is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IFileService/File/AvatarUpload", ReplyAction="letsTalk.IFileService/File/AvatarUploadResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.ChatService.StreamExceptionFault), Action="letsTalk.IFileService/File/AvatarUploadStreamExceptionFaultFault", Name="StreamExceptionFault", Namespace="http://schemas.datacontract.org/2004/07/letsTalk")]
        Client.ChatService.AvatarUploadResponse AvatarUpload(Client.ChatService.UploadFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IFileService/File/AvatarUpload", ReplyAction="letsTalk.IFileService/File/AvatarUploadResponse")]
        System.Threading.Tasks.Task<Client.ChatService.AvatarUploadResponse> AvatarUploadAsync(Client.ChatService.UploadFileInfo request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadRequest", WrapperNamespace="letsTalk.IFileService", IsWrapped=true)]
    public partial class DownloadRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="letsTalk.IFileService", Order=0)]
        public int Requested_UserSqlId;
        
        public DownloadRequest() {
        }
        
        public DownloadRequest(int Requested_UserSqlId) {
            this.Requested_UserSqlId = Requested_UserSqlId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadFileInfo", WrapperNamespace="letsTalk.IFileService", IsWrapped=true)]
    public partial class DownloadFileInfo {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="letsTalk.IFileService")]
        public string FileExtension;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="letsTalk.IFileService")]
        public long Length;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="letsTalk.IFileService", Order=0)]
        public System.IO.Stream FileStream;
        
        public DownloadFileInfo() {
        }
        
        public DownloadFileInfo(string FileExtension, long Length, System.IO.Stream FileStream) {
            this.FileExtension = FileExtension;
            this.Length = Length;
            this.FileStream = FileStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadFileInfo", WrapperNamespace="letsTalk.IFileService", IsWrapped=true)]
    public partial class UploadFileInfo {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="letsTalk.IFileService")]
        public string FileExtension;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="letsTalk.IFileService")]
        public int Responsed_UserSqlId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="letsTalk.IFileService", Order=0)]
        public System.IO.Stream FileStream;
        
        public UploadFileInfo() {
        }
        
        public UploadFileInfo(string FileExtension, int Responsed_UserSqlId, System.IO.Stream FileStream) {
            this.FileExtension = FileExtension;
            this.Responsed_UserSqlId = Responsed_UserSqlId;
            this.FileStream = FileStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class AvatarUploadResponse {
        
        public AvatarUploadResponse() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface FileChannel : Client.ChatService.File, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileClient : System.ServiceModel.ClientBase<Client.ChatService.File>, Client.ChatService.File {
        
        public FileClient() {
        }
        
        public FileClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Client.ChatService.DownloadFileInfo Client.ChatService.File.AvatarDownload(Client.ChatService.DownloadRequest request) {
            return base.Channel.AvatarDownload(request);
        }
        
        public string AvatarDownload(int Requested_UserSqlId, out long Length, out System.IO.Stream FileStream) {
            Client.ChatService.DownloadRequest inValue = new Client.ChatService.DownloadRequest();
            inValue.Requested_UserSqlId = Requested_UserSqlId;
            Client.ChatService.DownloadFileInfo retVal = ((Client.ChatService.File)(this)).AvatarDownload(inValue);
            Length = retVal.Length;
            FileStream = retVal.FileStream;
            return retVal.FileExtension;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Client.ChatService.DownloadFileInfo> Client.ChatService.File.AvatarDownloadAsync(Client.ChatService.DownloadRequest request) {
            return base.Channel.AvatarDownloadAsync(request);
        }
        
        public System.Threading.Tasks.Task<Client.ChatService.DownloadFileInfo> AvatarDownloadAsync(int Requested_UserSqlId) {
            Client.ChatService.DownloadRequest inValue = new Client.ChatService.DownloadRequest();
            inValue.Requested_UserSqlId = Requested_UserSqlId;
            return ((Client.ChatService.File)(this)).AvatarDownloadAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Client.ChatService.AvatarUploadResponse Client.ChatService.File.AvatarUpload(Client.ChatService.UploadFileInfo request) {
            return base.Channel.AvatarUpload(request);
        }
        
        public void AvatarUpload(string FileExtension, int Responsed_UserSqlId, System.IO.Stream FileStream) {
            Client.ChatService.UploadFileInfo inValue = new Client.ChatService.UploadFileInfo();
            inValue.FileExtension = FileExtension;
            inValue.Responsed_UserSqlId = Responsed_UserSqlId;
            inValue.FileStream = FileStream;
            Client.ChatService.AvatarUploadResponse retVal = ((Client.ChatService.File)(this)).AvatarUpload(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Client.ChatService.AvatarUploadResponse> Client.ChatService.File.AvatarUploadAsync(Client.ChatService.UploadFileInfo request) {
            return base.Channel.AvatarUploadAsync(request);
        }
        
        public System.Threading.Tasks.Task<Client.ChatService.AvatarUploadResponse> AvatarUploadAsync(string FileExtension, int Responsed_UserSqlId, System.IO.Stream FileStream) {
            Client.ChatService.UploadFileInfo inValue = new Client.ChatService.UploadFileInfo();
            inValue.FileExtension = FileExtension;
            inValue.Responsed_UserSqlId = Responsed_UserSqlId;
            inValue.FileStream = FileStream;
            return ((Client.ChatService.File)(this)).AvatarUploadAsync(inValue);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="letsTalk.IChatService", ConfigurationName="ChatService.Chat")]
    public interface Chat {
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IChatService/Chat/Registration", ReplyAction="letsTalk.IChatService/Chat/RegistrationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.ChatService.LoginExceptionFault), Action="letsTalk.IChatService/Chat/RegistrationLoginExceptionFaultFault", Name="LoginExceptionFault", Namespace="http://schemas.datacontract.org/2004/07/letsTalk")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.ChatService.NicknameExceptionFault), Action="letsTalk.IChatService/Chat/RegistrationNicknameExceptionFaultFault", Name="NicknameExceptionFault", Namespace="http://schemas.datacontract.org/2004/07/letsTalk")]
        int Registration(Client.ChatService.ServerUserInfo serverUserInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IChatService/Chat/Registration", ReplyAction="letsTalk.IChatService/Chat/RegistrationResponse")]
        System.Threading.Tasks.Task<int> RegistrationAsync(Client.ChatService.ServerUserInfo serverUserInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IChatService/Chat/Authorization", ReplyAction="letsTalk.IChatService/Chat/AuthorizationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.ChatService.AuthorizationExceptionFault), Action="letsTalk.IChatService/Chat/AuthorizationAuthorizationExceptionFaultFault", Name="AuthorizationExceptionFault", Namespace="http://schemas.datacontract.org/2004/07/letsTalk")]
        Client.ChatService.ServerUserInfo Authorization(Client.ChatService.AuthenticationUserInfo authenticationUserInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IChatService/Chat/Authorization", ReplyAction="letsTalk.IChatService/Chat/AuthorizationResponse")]
        System.Threading.Tasks.Task<Client.ChatService.ServerUserInfo> AuthorizationAsync(Client.ChatService.AuthenticationUserInfo authenticationUserInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IChatService/Chat/Connect", ReplyAction="letsTalk.IChatService/Chat/ConnectResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.ChatService.ConnectionExceptionFault), Action="letsTalk.IChatService/Chat/ConnectConnectionExceptionFaultFault", Name="ConnectionExceptionFault", Namespace="http://schemas.datacontract.org/2004/07/letsTalk")]
        System.Guid Connect(int sqlId);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IChatService/Chat/Connect", ReplyAction="letsTalk.IChatService/Chat/ConnectResponse")]
        System.Threading.Tasks.Task<System.Guid> ConnectAsync(int sqlId);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IChatService/Chat/SendMessage", ReplyAction="letsTalk.IChatService/Chat/SendMessageResponse")]
        bool SendMessage(string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IChatService/Chat/SendMessage", ReplyAction="letsTalk.IChatService/Chat/SendMessageResponse")]
        System.Threading.Tasks.Task<bool> SendMessageAsync(string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IChatService/Chat/GetUsers", ReplyAction="letsTalk.IChatService/Chat/GetUsersResponse")]
        System.Collections.Generic.Dictionary<int, string> GetUsers(int count, int offset);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IChatService/Chat/GetUsers", ReplyAction="letsTalk.IChatService/Chat/GetUsersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> GetUsersAsync(int count, int offset);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="letsTalk.IChatService/Chat/CreateChatroom")]
        void CreateChatroom(string chatName, int[] users);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="letsTalk.IChatService/Chat/CreateChatroom")]
        System.Threading.Tasks.Task CreateChatroomAsync(string chatName, int[] users);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IChatService/Chat/Disconnect", ReplyAction="letsTalk.IChatService/Chat/DisconnectResponse")]
        void Disconnect(System.Guid UserId);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IChatService/Chat/Disconnect", ReplyAction="letsTalk.IChatService/Chat/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(System.Guid UserId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ChatChannel : Client.ChatService.Chat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatClient : System.ServiceModel.ClientBase<Client.ChatService.Chat>, Client.ChatService.Chat {
        
        public ChatClient() {
        }
        
        public ChatClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ChatClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Registration(Client.ChatService.ServerUserInfo serverUserInfo) {
            return base.Channel.Registration(serverUserInfo);
        }
        
        public System.Threading.Tasks.Task<int> RegistrationAsync(Client.ChatService.ServerUserInfo serverUserInfo) {
            return base.Channel.RegistrationAsync(serverUserInfo);
        }
        
        public Client.ChatService.ServerUserInfo Authorization(Client.ChatService.AuthenticationUserInfo authenticationUserInfo) {
            return base.Channel.Authorization(authenticationUserInfo);
        }
        
        public System.Threading.Tasks.Task<Client.ChatService.ServerUserInfo> AuthorizationAsync(Client.ChatService.AuthenticationUserInfo authenticationUserInfo) {
            return base.Channel.AuthorizationAsync(authenticationUserInfo);
        }
        
        public System.Guid Connect(int sqlId) {
            return base.Channel.Connect(sqlId);
        }
        
        public System.Threading.Tasks.Task<System.Guid> ConnectAsync(int sqlId) {
            return base.Channel.ConnectAsync(sqlId);
        }
        
        public bool SendMessage(string message) {
            return base.Channel.SendMessage(message);
        }
        
        public System.Threading.Tasks.Task<bool> SendMessageAsync(string message) {
            return base.Channel.SendMessageAsync(message);
        }
        
        public System.Collections.Generic.Dictionary<int, string> GetUsers(int count, int offset) {
            return base.Channel.GetUsers(count, offset);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> GetUsersAsync(int count, int offset) {
            return base.Channel.GetUsersAsync(count, offset);
        }
        
        public void CreateChatroom(string chatName, int[] users) {
            base.Channel.CreateChatroom(chatName, users);
        }
        
        public System.Threading.Tasks.Task CreateChatroomAsync(string chatName, int[] users) {
            return base.Channel.CreateChatroomAsync(chatName, users);
        }
        
        public void Disconnect(System.Guid UserId) {
            base.Channel.Disconnect(UserId);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(System.Guid UserId) {
            return base.Channel.DisconnectAsync(UserId);
        }
    }
}
