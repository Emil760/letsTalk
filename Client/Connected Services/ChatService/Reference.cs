//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ChatService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceMessage", Namespace="http://schemas.datacontract.org/2004/07/letsTalk")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Client.ChatService.ServiceMessageFile))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Client.ChatService.ServiceMessageManage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Client.ChatService.ServiceMessageText))]
    public partial class ServiceMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTime DateTimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime DateTime {
            get {
                return this.DateTimeField;
            }
            set {
                if ((this.DateTimeField.Equals(value) != true)) {
                    this.DateTimeField = value;
                    this.RaisePropertyChanged("DateTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceMessageFile", Namespace="http://schemas.datacontract.org/2004/07/letsTalk")]
    [System.SerializableAttribute()]
    public partial class ServiceMessageFile : Client.ChatService.ServiceMessage {
        
        private string FileNameField;
        
        private System.Guid StreamIdField;
        
        private int UserIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid StreamId {
            get {
                return this.StreamIdField;
            }
            set {
                if ((this.StreamIdField.Equals(value) != true)) {
                    this.StreamIdField = value;
                    this.RaisePropertyChanged("StreamId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceMessageManage", Namespace="http://schemas.datacontract.org/2004/07/letsTalk")]
    [System.SerializableAttribute()]
    public partial class ServiceMessageManage : Client.ChatService.ServiceMessage {
        
        private Client.ChatService.RulingMessage RulingMessageField;
        
        private string UserNicknameField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public Client.ChatService.RulingMessage RulingMessage {
            get {
                return this.RulingMessageField;
            }
            set {
                if ((this.RulingMessageField.Equals(value) != true)) {
                    this.RulingMessageField = value;
                    this.RaisePropertyChanged("RulingMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string UserNickname {
            get {
                return this.UserNicknameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNicknameField, value) != true)) {
                    this.UserNicknameField = value;
                    this.RaisePropertyChanged("UserNickname");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceMessageText", Namespace="http://schemas.datacontract.org/2004/07/letsTalk")]
    [System.SerializableAttribute()]
    public partial class ServiceMessageText : Client.ChatService.ServiceMessage {
        
        private string TextField;
        
        private int UserIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RulingMessage", Namespace="http://schemas.datacontract.org/2004/07/letsTalk")]
    public enum RulingMessage : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UserJoined = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UserLeft = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UserRemoved = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ChatroomDelete = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AddChatExceptionFault", Namespace="http://schemas.datacontract.org/2004/07/letsTalk")]
    [System.SerializableAttribute()]
    public partial class AddChatExceptionFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConnectionExceptionFault", Namespace="http://schemas.datacontract.org/2004/07/letsTalk")]
    [System.SerializableAttribute()]
    public partial class ConnectionExceptionFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Chatroom", Namespace="http://schemas.datacontract.org/2004/07/letsTalk")]
    [System.SerializableAttribute()]
    public partial class Chatroom : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ChatNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChatSqlIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsGroupField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ChatName {
            get {
                return this.ChatNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ChatNameField, value) != true)) {
                    this.ChatNameField = value;
                    this.RaisePropertyChanged("ChatName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChatSqlId {
            get {
                return this.ChatSqlIdField;
            }
            set {
                if ((this.ChatSqlIdField.Equals(value) != true)) {
                    this.ChatSqlIdField = value;
                    this.RaisePropertyChanged("ChatSqlId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsGroup {
            get {
                return this.IsGroupField;
            }
            set {
                if ((this.IsGroupField.Equals(value) != true)) {
                    this.IsGroupField = value;
                    this.RaisePropertyChanged("IsGroup");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserInChat", Namespace="http://schemas.datacontract.org/2004/07/letsTalk")]
    [System.SerializableAttribute()]
    public partial class UserInChat : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsLeftField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsOnlineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LeaveDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserSqlIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsLeft {
            get {
                return this.IsLeftField;
            }
            set {
                if ((this.IsLeftField.Equals(value) != true)) {
                    this.IsLeftField = value;
                    this.RaisePropertyChanged("IsLeft");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOnline {
            get {
                return this.IsOnlineField;
            }
            set {
                if ((this.IsOnlineField.Equals(value) != true)) {
                    this.IsOnlineField = value;
                    this.RaisePropertyChanged("IsOnline");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LeaveDate {
            get {
                return this.LeaveDateField;
            }
            set {
                if ((this.LeaveDateField.Equals(value) != true)) {
                    this.LeaveDateField = value;
                    this.RaisePropertyChanged("LeaveDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserSqlId {
            get {
                return this.UserSqlIdField;
            }
            set {
                if ((this.UserSqlIdField.Equals(value) != true)) {
                    this.UserSqlIdField = value;
                    this.RaisePropertyChanged("UserSqlId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthenticationUserInfo", Namespace="http://schemas.datacontract.org/2004/07/letsTalk")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Client.ChatService.ServerUserInfo))]
    public partial class AuthenticationUserInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string LoginField;
        
        private string PasswordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerUserInfo", Namespace="http://schemas.datacontract.org/2004/07/letsTalk")]
    [System.SerializableAttribute()]
    public partial class ServerUserInfo : Client.ChatService.AuthenticationUserInfo {
        
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SqlIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SqlId {
            get {
                return this.SqlIdField;
            }
            set {
                if ((this.SqlIdField.Equals(value) != true)) {
                    this.SqlIdField = value;
                    this.RaisePropertyChanged("SqlId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthorizationExceptionFault", Namespace="http://schemas.datacontract.org/2004/07/letsTalk")]
    [System.SerializableAttribute()]
    public partial class AuthorizationExceptionFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LoginExceptionFault", Namespace="http://schemas.datacontract.org/2004/07/letsTalk")]
    [System.SerializableAttribute()]
    public partial class LoginExceptionFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NicknameExceptionFault", Namespace="http://schemas.datacontract.org/2004/07/letsTalk")]
    [System.SerializableAttribute()]
    public partial class NicknameExceptionFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StreamExceptionFault", Namespace="http://schemas.datacontract.org/2004/07/letsTalk")]
    [System.SerializableAttribute()]
    public partial class StreamExceptionFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="letsTalk.IUnitService", ConfigurationName="ChatService.Unit")]
    public interface Unit {
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IUnitService/Unit/Authorization", ReplyAction="letsTalk.IUnitService/Unit/AuthorizationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.ChatService.AuthorizationExceptionFault), Action="letsTalk.IUnitService/Unit/AuthorizationAuthorizationExceptionFaultFault", Name="AuthorizationExceptionFault", Namespace="http://schemas.datacontract.org/2004/07/letsTalk")]
        Client.ChatService.ServerUserInfo Authorization(Client.ChatService.AuthenticationUserInfo authenticationUserInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IUnitService/Unit/Authorization", ReplyAction="letsTalk.IUnitService/Unit/AuthorizationResponse")]
        System.Threading.Tasks.Task<Client.ChatService.ServerUserInfo> AuthorizationAsync(Client.ChatService.AuthenticationUserInfo authenticationUserInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IUnitService/Unit/Registration", ReplyAction="letsTalk.IUnitService/Unit/RegistrationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.ChatService.LoginExceptionFault), Action="letsTalk.IUnitService/Unit/RegistrationLoginExceptionFaultFault", Name="LoginExceptionFault", Namespace="http://schemas.datacontract.org/2004/07/letsTalk")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.ChatService.NicknameExceptionFault), Action="letsTalk.IUnitService/Unit/RegistrationNicknameExceptionFaultFault", Name="NicknameExceptionFault", Namespace="http://schemas.datacontract.org/2004/07/letsTalk")]
        int Registration(Client.ChatService.ServerUserInfo serverUserInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IUnitService/Unit/Registration", ReplyAction="letsTalk.IUnitService/Unit/RegistrationResponse")]
        System.Threading.Tasks.Task<int> RegistrationAsync(Client.ChatService.ServerUserInfo serverUserInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IUnitService/Unit/GetRegisteredUsers", ReplyAction="letsTalk.IUnitService/Unit/GetRegisteredUsersResponse")]
        System.Collections.Generic.Dictionary<int, string> GetRegisteredUsers(int count, int offset, int callerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IUnitService/Unit/GetRegisteredUsers", ReplyAction="letsTalk.IUnitService/Unit/GetRegisteredUsersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> GetRegisteredUsersAsync(int count, int offset, int callerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IUnitService/Unit/MessagesFromOneChat", ReplyAction="letsTalk.IUnitService/Unit/MessagesFromOneChatResponse")]
        Client.ChatService.ServiceMessage[] MessagesFromOneChat(int chatroomId, int userId, int offset, int count, System.DateTime offsetDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IUnitService/Unit/MessagesFromOneChat", ReplyAction="letsTalk.IUnitService/Unit/MessagesFromOneChatResponse")]
        System.Threading.Tasks.Task<Client.ChatService.ServiceMessage[]> MessagesFromOneChatAsync(int chatroomId, int userId, int offset, int count, System.DateTime offsetDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IUnitService/Unit/FindUserName", ReplyAction="letsTalk.IUnitService/Unit/FindUserNameResponse")]
        string FindUserName(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IUnitService/Unit/FindUserName", ReplyAction="letsTalk.IUnitService/Unit/FindUserNameResponse")]
        System.Threading.Tasks.Task<string> FindUserNameAsync(int userId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface UnitChannel : Client.ChatService.Unit, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UnitClient : System.ServiceModel.ClientBase<Client.ChatService.Unit>, Client.ChatService.Unit {
        
        public UnitClient() {
        }
        
        public UnitClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UnitClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UnitClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UnitClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Client.ChatService.ServerUserInfo Authorization(Client.ChatService.AuthenticationUserInfo authenticationUserInfo) {
            return base.Channel.Authorization(authenticationUserInfo);
        }
        
        public System.Threading.Tasks.Task<Client.ChatService.ServerUserInfo> AuthorizationAsync(Client.ChatService.AuthenticationUserInfo authenticationUserInfo) {
            return base.Channel.AuthorizationAsync(authenticationUserInfo);
        }
        
        public int Registration(Client.ChatService.ServerUserInfo serverUserInfo) {
            return base.Channel.Registration(serverUserInfo);
        }
        
        public System.Threading.Tasks.Task<int> RegistrationAsync(Client.ChatService.ServerUserInfo serverUserInfo) {
            return base.Channel.RegistrationAsync(serverUserInfo);
        }
        
        public System.Collections.Generic.Dictionary<int, string> GetRegisteredUsers(int count, int offset, int callerId) {
            return base.Channel.GetRegisteredUsers(count, offset, callerId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> GetRegisteredUsersAsync(int count, int offset, int callerId) {
            return base.Channel.GetRegisteredUsersAsync(count, offset, callerId);
        }
        
        public Client.ChatService.ServiceMessage[] MessagesFromOneChat(int chatroomId, int userId, int offset, int count, System.DateTime offsetDate) {
            return base.Channel.MessagesFromOneChat(chatroomId, userId, offset, count, offsetDate);
        }
        
        public System.Threading.Tasks.Task<Client.ChatService.ServiceMessage[]> MessagesFromOneChatAsync(int chatroomId, int userId, int offset, int count, System.DateTime offsetDate) {
            return base.Channel.MessagesFromOneChatAsync(chatroomId, userId, offset, count, offsetDate);
        }
        
        public string FindUserName(int userId) {
            return base.Channel.FindUserName(userId);
        }
        
        public System.Threading.Tasks.Task<string> FindUserNameAsync(int userId) {
            return base.Channel.FindUserNameAsync(userId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="letsTalk.IChatService", ConfigurationName="ChatService.Chat", CallbackContract=typeof(Client.ChatService.ChatCallback))]
    public interface Chat {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="letsTalk.IChatService/Chat/MessageIsWriting")]
        void MessageIsWriting(int chatroomId, System.Nullable<int> userSqlId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="letsTalk.IChatService/Chat/MessageIsWriting")]
        System.Threading.Tasks.Task MessageIsWritingAsync(int chatroomId, System.Nullable<int> userSqlId);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IChatService/Chat/SendMessageText", ReplyAction="letsTalk.IChatService/Chat/SendMessageTextResponse")]
        void SendMessageText(Client.ChatService.ServiceMessageText message, int chatroomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IChatService/Chat/SendMessageText", ReplyAction="letsTalk.IChatService/Chat/SendMessageTextResponse")]
        System.Threading.Tasks.Task SendMessageTextAsync(Client.ChatService.ServiceMessageText message, int chatroomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IChatService/Chat/CreateChatroom", ReplyAction="letsTalk.IChatService/Chat/CreateChatroomResponse")]
        int CreateChatroom(int[] users, string chatName);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IChatService/Chat/CreateChatroom", ReplyAction="letsTalk.IChatService/Chat/CreateChatroomResponse")]
        System.Threading.Tasks.Task<int> CreateChatroomAsync(int[] users, string chatName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="letsTalk.IChatService/Chat/DeleteChatroom")]
        void DeleteChatroom(int chatId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="letsTalk.IChatService/Chat/DeleteChatroom")]
        System.Threading.Tasks.Task DeleteChatroomAsync(int chatId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IChatService/Chat/AddUserToChatroom", ReplyAction="letsTalk.IChatService/Chat/AddUserToChatroomResponse")]
        void AddUserToChatroom(int userId, int chatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IChatService/Chat/AddUserToChatroom", ReplyAction="letsTalk.IChatService/Chat/AddUserToChatroomResponse")]
        System.Threading.Tasks.Task AddUserToChatroomAsync(int userId, int chatId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="letsTalk.IChatService/Chat/RemoveUserFromChatroom")]
        void RemoveUserFromChatroom(int userId, int chatId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="letsTalk.IChatService/Chat/RemoveUserFromChatroom")]
        System.Threading.Tasks.Task RemoveUserFromChatroomAsync(int userId, int chatId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="letsTalk.IChatService/Chat/LeaveFromChatroom")]
        void LeaveFromChatroom(int userId, int chatId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="letsTalk.IChatService/Chat/LeaveFromChatroom")]
        System.Threading.Tasks.Task LeaveFromChatroomAsync(int userId, int chatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IChatService/Chat/AddedUserToChatIsOnline", ReplyAction="letsTalk.IChatService/Chat/AddedUserToChatIsOnlineResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.ChatService.AddChatExceptionFault), Action="letsTalk.IChatService/Chat/AddedUserToChatIsOnlineAddChatExceptionFaultFault", Name="AddChatExceptionFault", Namespace="http://schemas.datacontract.org/2004/07/letsTalk")]
        void AddedUserToChatIsOnline(int userId, int chatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IChatService/Chat/AddedUserToChatIsOnline", ReplyAction="letsTalk.IChatService/Chat/AddedUserToChatIsOnlineResponse")]
        System.Threading.Tasks.Task AddedUserToChatIsOnlineAsync(int userId, int chatId);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IChatService/Chat/Connect", ReplyAction="letsTalk.IChatService/Chat/ConnectResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.ChatService.ConnectionExceptionFault), Action="letsTalk.IChatService/Chat/ConnectConnectionExceptionFaultFault", Name="ConnectionExceptionFault", Namespace="http://schemas.datacontract.org/2004/07/letsTalk")]
        void Connect(int sqlId, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IChatService/Chat/Connect", ReplyAction="letsTalk.IChatService/Chat/ConnectResponse")]
        System.Threading.Tasks.Task ConnectAsync(int sqlId, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IChatService/Chat/FindAllChatroomsForClient", ReplyAction="letsTalk.IChatService/Chat/FindAllChatroomsForClientResponse")]
        System.Collections.Generic.Dictionary<Client.ChatService.Chatroom, Client.ChatService.UserInChat[]> FindAllChatroomsForClient(int userSqlId);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IChatService/Chat/FindAllChatroomsForClient", ReplyAction="letsTalk.IChatService/Chat/FindAllChatroomsForClientResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<Client.ChatService.Chatroom, Client.ChatService.UserInChat[]>> FindAllChatroomsForClientAsync(int userSqlId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ChatCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="letsTalk.IChatService/Chat/NotifyUserIsOnline")]
        void NotifyUserIsOnline(int sqlUserId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="letsTalk.IChatService/Chat/NotifyUserIsOffline")]
        void NotifyUserIsOffline(int sqlUserId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="letsTalk.IChatService/Chat/NotifyUserIsAddedToChat")]
        void NotifyUserIsAddedToChat(int chatId, string chatName, Client.ChatService.UserInChat[] usersInChat);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="letsTalk.IChatService/Chat/NotifyUserIsRemovedFromChat")]
        void NotifyUserIsRemovedFromChat(int chatId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="letsTalk.IChatService/Chat/UserJoinedToChatroom")]
        void UserJoinedToChatroom(int chatId, int userId, string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="letsTalk.IChatService/Chat/UserLeftChatroom")]
        void UserLeftChatroom(int chatId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="letsTalk.IChatService/Chat/ReplyMessage")]
        void ReplyMessage(Client.ChatService.ServiceMessageText message, int chatroomId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="letsTalk.IChatService/Chat/ReplyMessageIsWriting")]
        void ReplyMessageIsWriting(System.Nullable<int> userId, int chatroomId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="letsTalk.IChatService/Chat/NotifyUserSendedFileToChat")]
        void NotifyUserSendedFileToChat(Client.ChatService.ServiceMessageFile serviceMessageFile, int chatroomId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="letsTalk.IChatService/Chat/NotifyUserChangedAvatar")]
        void NotifyUserChangedAvatar(int userId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="letsTalk.IChatService/Chat/NotifyСhatroomAvatarIsChanged")]
        void NotifyСhatroomAvatarIsChanged(int chatId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ChatChannel : Client.ChatService.Chat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatClient : System.ServiceModel.DuplexClientBase<Client.ChatService.Chat>, Client.ChatService.Chat {
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void MessageIsWriting(int chatroomId, System.Nullable<int> userSqlId) {
            base.Channel.MessageIsWriting(chatroomId, userSqlId);
        }
        
        public System.Threading.Tasks.Task MessageIsWritingAsync(int chatroomId, System.Nullable<int> userSqlId) {
            return base.Channel.MessageIsWritingAsync(chatroomId, userSqlId);
        }
        
        public void SendMessageText(Client.ChatService.ServiceMessageText message, int chatroomId) {
            base.Channel.SendMessageText(message, chatroomId);
        }
        
        public System.Threading.Tasks.Task SendMessageTextAsync(Client.ChatService.ServiceMessageText message, int chatroomId) {
            return base.Channel.SendMessageTextAsync(message, chatroomId);
        }
        
        public int CreateChatroom(int[] users, string chatName) {
            return base.Channel.CreateChatroom(users, chatName);
        }
        
        public System.Threading.Tasks.Task<int> CreateChatroomAsync(int[] users, string chatName) {
            return base.Channel.CreateChatroomAsync(users, chatName);
        }
        
        public void DeleteChatroom(int chatId, int userId) {
            base.Channel.DeleteChatroom(chatId, userId);
        }
        
        public System.Threading.Tasks.Task DeleteChatroomAsync(int chatId, int userId) {
            return base.Channel.DeleteChatroomAsync(chatId, userId);
        }
        
        public void AddUserToChatroom(int userId, int chatId) {
            base.Channel.AddUserToChatroom(userId, chatId);
        }
        
        public System.Threading.Tasks.Task AddUserToChatroomAsync(int userId, int chatId) {
            return base.Channel.AddUserToChatroomAsync(userId, chatId);
        }
        
        public void RemoveUserFromChatroom(int userId, int chatId) {
            base.Channel.RemoveUserFromChatroom(userId, chatId);
        }
        
        public System.Threading.Tasks.Task RemoveUserFromChatroomAsync(int userId, int chatId) {
            return base.Channel.RemoveUserFromChatroomAsync(userId, chatId);
        }
        
        public void LeaveFromChatroom(int userId, int chatId) {
            base.Channel.LeaveFromChatroom(userId, chatId);
        }
        
        public System.Threading.Tasks.Task LeaveFromChatroomAsync(int userId, int chatId) {
            return base.Channel.LeaveFromChatroomAsync(userId, chatId);
        }
        
        public void AddedUserToChatIsOnline(int userId, int chatId) {
            base.Channel.AddedUserToChatIsOnline(userId, chatId);
        }
        
        public System.Threading.Tasks.Task AddedUserToChatIsOnlineAsync(int userId, int chatId) {
            return base.Channel.AddedUserToChatIsOnlineAsync(userId, chatId);
        }
        
        public void Connect(int sqlId, string userName) {
            base.Channel.Connect(sqlId, userName);
        }
        
        public System.Threading.Tasks.Task ConnectAsync(int sqlId, string userName) {
            return base.Channel.ConnectAsync(sqlId, userName);
        }
        
        public System.Collections.Generic.Dictionary<Client.ChatService.Chatroom, Client.ChatService.UserInChat[]> FindAllChatroomsForClient(int userSqlId) {
            return base.Channel.FindAllChatroomsForClient(userSqlId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<Client.ChatService.Chatroom, Client.ChatService.UserInChat[]>> FindAllChatroomsForClientAsync(int userSqlId) {
            return base.Channel.FindAllChatroomsForClientAsync(userSqlId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="letsTalk.IAvatarService", ConfigurationName="ChatService.Avatar")]
    public interface Avatar {
        
        // CODEGEN: Generating message contract since the wrapper name (DownloadRequest) of message DownloadRequest does not match the default value (UserAvatarDownload)
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IAvatarService/Avatar/UserAvatarDownload", ReplyAction="letsTalk.IAvatarService/Avatar/UserAvatarDownloadResponse")]
        Client.ChatService.DownloadFileInfo UserAvatarDownload(Client.ChatService.DownloadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IAvatarService/Avatar/UserAvatarDownload", ReplyAction="letsTalk.IAvatarService/Avatar/UserAvatarDownloadResponse")]
        System.Threading.Tasks.Task<Client.ChatService.DownloadFileInfo> UserAvatarDownloadAsync(Client.ChatService.DownloadRequest request);
        
        // CODEGEN: Generating message contract since the wrapper name (DownloadRequest) of message DownloadRequest does not match the default value (ChatAvatarDownload)
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IAvatarService/Avatar/ChatAvatarDownload", ReplyAction="letsTalk.IAvatarService/Avatar/ChatAvatarDownloadResponse")]
        Client.ChatService.DownloadFileInfo ChatAvatarDownload(Client.ChatService.DownloadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IAvatarService/Avatar/ChatAvatarDownload", ReplyAction="letsTalk.IAvatarService/Avatar/ChatAvatarDownloadResponse")]
        System.Threading.Tasks.Task<Client.ChatService.DownloadFileInfo> ChatAvatarDownloadAsync(Client.ChatService.DownloadRequest request);
        
        // CODEGEN: Generating message contract since the operation UserAvatarUpload is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IAvatarService/Avatar/UserAvatarUpload", ReplyAction="letsTalk.IAvatarService/Avatar/UserAvatarUploadResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.ChatService.StreamExceptionFault), Action="letsTalk.IAvatarService/Avatar/UserAvatarUploadStreamExceptionFaultFault", Name="StreamExceptionFault", Namespace="http://schemas.datacontract.org/2004/07/letsTalk")]
        Client.ChatService.UserAvatarUploadResponse UserAvatarUpload(Client.ChatService.UploadFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IAvatarService/Avatar/UserAvatarUpload", ReplyAction="letsTalk.IAvatarService/Avatar/UserAvatarUploadResponse")]
        System.Threading.Tasks.Task<Client.ChatService.UserAvatarUploadResponse> UserAvatarUploadAsync(Client.ChatService.UploadFileInfo request);
        
        // CODEGEN: Generating message contract since the operation ChatAvatarUpload is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IAvatarService/Avatar/ChatAvatarUpload", ReplyAction="letsTalk.IAvatarService/Avatar/ChatAvatarUploadResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(Client.ChatService.StreamExceptionFault), Action="letsTalk.IAvatarService/Avatar/ChatAvatarUploadStreamExceptionFaultFault", Name="StreamExceptionFault", Namespace="http://schemas.datacontract.org/2004/07/letsTalk")]
        Client.ChatService.ChatAvatarUploadResponse ChatAvatarUpload(Client.ChatService.UploadFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IAvatarService/Avatar/ChatAvatarUpload", ReplyAction="letsTalk.IAvatarService/Avatar/ChatAvatarUploadResponse")]
        System.Threading.Tasks.Task<Client.ChatService.ChatAvatarUploadResponse> ChatAvatarUploadAsync(Client.ChatService.UploadFileInfo request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadRequest", WrapperNamespace="letsTalk.IAvatarService", IsWrapped=true)]
    public partial class DownloadRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="letsTalk.IAvatarService", Order=0)]
        public int Requested_SqlId;
        
        public DownloadRequest() {
        }
        
        public DownloadRequest(int Requested_SqlId) {
            this.Requested_SqlId = Requested_SqlId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadFileInfo", WrapperNamespace="letsTalk.IAvatarService", IsWrapped=true)]
    public partial class DownloadFileInfo {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="letsTalk.IAvatarService")]
        public string FileExtension;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="letsTalk.IAvatarService")]
        public long Length;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="letsTalk.IAvatarService", Order=0)]
        public System.IO.Stream FileStream;
        
        public DownloadFileInfo() {
        }
        
        public DownloadFileInfo(string FileExtension, long Length, System.IO.Stream FileStream) {
            this.FileExtension = FileExtension;
            this.Length = Length;
            this.FileStream = FileStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadFileInfo", WrapperNamespace="letsTalk.IAvatarService", IsWrapped=true)]
    public partial class UploadFileInfo {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="letsTalk.IAvatarService")]
        public string FileName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="letsTalk.IAvatarService")]
        public int Responsed_SqlId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="letsTalk.IAvatarService", Order=0)]
        public System.IO.Stream FileStream;
        
        public UploadFileInfo() {
        }
        
        public UploadFileInfo(string FileName, int Responsed_SqlId, System.IO.Stream FileStream) {
            this.FileName = FileName;
            this.Responsed_SqlId = Responsed_SqlId;
            this.FileStream = FileStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UserAvatarUploadResponse {
        
        public UserAvatarUploadResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ChatAvatarUploadResponse {
        
        public ChatAvatarUploadResponse() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface AvatarChannel : Client.ChatService.Avatar, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AvatarClient : System.ServiceModel.ClientBase<Client.ChatService.Avatar>, Client.ChatService.Avatar {
        
        public AvatarClient() {
        }
        
        public AvatarClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AvatarClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AvatarClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AvatarClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Client.ChatService.DownloadFileInfo Client.ChatService.Avatar.UserAvatarDownload(Client.ChatService.DownloadRequest request) {
            return base.Channel.UserAvatarDownload(request);
        }
        
        public string UserAvatarDownload(int Requested_SqlId, out long Length, out System.IO.Stream FileStream) {
            Client.ChatService.DownloadRequest inValue = new Client.ChatService.DownloadRequest();
            inValue.Requested_SqlId = Requested_SqlId;
            Client.ChatService.DownloadFileInfo retVal = ((Client.ChatService.Avatar)(this)).UserAvatarDownload(inValue);
            Length = retVal.Length;
            FileStream = retVal.FileStream;
            return retVal.FileExtension;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Client.ChatService.DownloadFileInfo> Client.ChatService.Avatar.UserAvatarDownloadAsync(Client.ChatService.DownloadRequest request) {
            return base.Channel.UserAvatarDownloadAsync(request);
        }
        
        public System.Threading.Tasks.Task<Client.ChatService.DownloadFileInfo> UserAvatarDownloadAsync(int Requested_SqlId) {
            Client.ChatService.DownloadRequest inValue = new Client.ChatService.DownloadRequest();
            inValue.Requested_SqlId = Requested_SqlId;
            return ((Client.ChatService.Avatar)(this)).UserAvatarDownloadAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Client.ChatService.DownloadFileInfo Client.ChatService.Avatar.ChatAvatarDownload(Client.ChatService.DownloadRequest request) {
            return base.Channel.ChatAvatarDownload(request);
        }
        
        public string ChatAvatarDownload(int Requested_SqlId, out long Length, out System.IO.Stream FileStream) {
            Client.ChatService.DownloadRequest inValue = new Client.ChatService.DownloadRequest();
            inValue.Requested_SqlId = Requested_SqlId;
            Client.ChatService.DownloadFileInfo retVal = ((Client.ChatService.Avatar)(this)).ChatAvatarDownload(inValue);
            Length = retVal.Length;
            FileStream = retVal.FileStream;
            return retVal.FileExtension;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Client.ChatService.DownloadFileInfo> Client.ChatService.Avatar.ChatAvatarDownloadAsync(Client.ChatService.DownloadRequest request) {
            return base.Channel.ChatAvatarDownloadAsync(request);
        }
        
        public System.Threading.Tasks.Task<Client.ChatService.DownloadFileInfo> ChatAvatarDownloadAsync(int Requested_SqlId) {
            Client.ChatService.DownloadRequest inValue = new Client.ChatService.DownloadRequest();
            inValue.Requested_SqlId = Requested_SqlId;
            return ((Client.ChatService.Avatar)(this)).ChatAvatarDownloadAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Client.ChatService.UserAvatarUploadResponse Client.ChatService.Avatar.UserAvatarUpload(Client.ChatService.UploadFileInfo request) {
            return base.Channel.UserAvatarUpload(request);
        }
        
        public void UserAvatarUpload(string FileName, int Responsed_SqlId, System.IO.Stream FileStream) {
            Client.ChatService.UploadFileInfo inValue = new Client.ChatService.UploadFileInfo();
            inValue.FileName = FileName;
            inValue.Responsed_SqlId = Responsed_SqlId;
            inValue.FileStream = FileStream;
            Client.ChatService.UserAvatarUploadResponse retVal = ((Client.ChatService.Avatar)(this)).UserAvatarUpload(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Client.ChatService.UserAvatarUploadResponse> Client.ChatService.Avatar.UserAvatarUploadAsync(Client.ChatService.UploadFileInfo request) {
            return base.Channel.UserAvatarUploadAsync(request);
        }
        
        public System.Threading.Tasks.Task<Client.ChatService.UserAvatarUploadResponse> UserAvatarUploadAsync(string FileName, int Responsed_SqlId, System.IO.Stream FileStream) {
            Client.ChatService.UploadFileInfo inValue = new Client.ChatService.UploadFileInfo();
            inValue.FileName = FileName;
            inValue.Responsed_SqlId = Responsed_SqlId;
            inValue.FileStream = FileStream;
            return ((Client.ChatService.Avatar)(this)).UserAvatarUploadAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Client.ChatService.ChatAvatarUploadResponse Client.ChatService.Avatar.ChatAvatarUpload(Client.ChatService.UploadFileInfo request) {
            return base.Channel.ChatAvatarUpload(request);
        }
        
        public void ChatAvatarUpload(string FileName, int Responsed_SqlId, System.IO.Stream FileStream) {
            Client.ChatService.UploadFileInfo inValue = new Client.ChatService.UploadFileInfo();
            inValue.FileName = FileName;
            inValue.Responsed_SqlId = Responsed_SqlId;
            inValue.FileStream = FileStream;
            Client.ChatService.ChatAvatarUploadResponse retVal = ((Client.ChatService.Avatar)(this)).ChatAvatarUpload(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Client.ChatService.ChatAvatarUploadResponse> Client.ChatService.Avatar.ChatAvatarUploadAsync(Client.ChatService.UploadFileInfo request) {
            return base.Channel.ChatAvatarUploadAsync(request);
        }
        
        public System.Threading.Tasks.Task<Client.ChatService.ChatAvatarUploadResponse> ChatAvatarUploadAsync(string FileName, int Responsed_SqlId, System.IO.Stream FileStream) {
            Client.ChatService.UploadFileInfo inValue = new Client.ChatService.UploadFileInfo();
            inValue.FileName = FileName;
            inValue.Responsed_SqlId = Responsed_SqlId;
            inValue.FileStream = FileStream;
            return ((Client.ChatService.Avatar)(this)).ChatAvatarUploadAsync(inValue);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="letsTalk.IFileService", ConfigurationName="ChatService.File")]
    public interface File {
        
        // CODEGEN: Generating message contract since the wrapper name (UploadFromChatToServer) of message UploadFromChatToServer does not match the default value (FileUpload)
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IFileService/File/FileUpload", ReplyAction="letsTalk.IFileService/File/FileUploadResponse")]
        Client.ChatService.FileFromChatDownloadRequest FileUpload(Client.ChatService.UploadFromChatToServer request);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IFileService/File/FileUpload", ReplyAction="letsTalk.IFileService/File/FileUploadResponse")]
        System.Threading.Tasks.Task<Client.ChatService.FileFromChatDownloadRequest> FileUploadAsync(Client.ChatService.UploadFromChatToServer request);
        
        // CODEGEN: Generating message contract since the wrapper name (FileFromChatDownloadRequest) of message FileFromChatDownloadRequest does not match the default value (FileDownload)
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IFileService/File/FileDownload", ReplyAction="letsTalk.IFileService/File/FileDownloadResponse")]
        Client.ChatService.DownloadFileInfo1 FileDownload(Client.ChatService.FileFromChatDownloadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="letsTalk.IFileService/File/FileDownload", ReplyAction="letsTalk.IFileService/File/FileDownloadResponse")]
        System.Threading.Tasks.Task<Client.ChatService.DownloadFileInfo1> FileDownloadAsync(Client.ChatService.FileFromChatDownloadRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadFromChatToServer", WrapperNamespace="letsTalk.IFileService", IsWrapped=true)]
    public partial class UploadFromChatToServer {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="letsTalk.IFileService")]
        public int ChatroomId;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="letsTalk.IFileService")]
        public string FileName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="letsTalk.IFileService")]
        public int Responsed_UserSqlId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="letsTalk.IFileService", Order=0)]
        public System.IO.Stream FileStream;
        
        public UploadFromChatToServer() {
        }
        
        public UploadFromChatToServer(int ChatroomId, string FileName, int Responsed_UserSqlId, System.IO.Stream FileStream) {
            this.ChatroomId = ChatroomId;
            this.FileName = FileName;
            this.Responsed_UserSqlId = Responsed_UserSqlId;
            this.FileStream = FileStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FileFromChatDownloadRequest", WrapperNamespace="letsTalk.IFileService", IsWrapped=true)]
    public partial class FileFromChatDownloadRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="letsTalk.IFileService", Order=0)]
        public System.Guid StreamId;
        
        public FileFromChatDownloadRequest() {
        }
        
        public FileFromChatDownloadRequest(System.Guid StreamId) {
            this.StreamId = StreamId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadFileInfo", WrapperNamespace="letsTalk.IFileService", IsWrapped=true)]
    public partial class DownloadFileInfo1 {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="letsTalk.IFileService")]
        public string FileExtension;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="letsTalk.IFileService")]
        public long Length;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="letsTalk.IFileService", Order=0)]
        public System.IO.Stream FileStream;
        
        public DownloadFileInfo1() {
        }
        
        public DownloadFileInfo1(string FileExtension, long Length, System.IO.Stream FileStream) {
            this.FileExtension = FileExtension;
            this.Length = Length;
            this.FileStream = FileStream;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface FileChannel : Client.ChatService.File, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileClient : System.ServiceModel.ClientBase<Client.ChatService.File>, Client.ChatService.File {
        
        public FileClient() {
        }
        
        public FileClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Client.ChatService.FileFromChatDownloadRequest Client.ChatService.File.FileUpload(Client.ChatService.UploadFromChatToServer request) {
            return base.Channel.FileUpload(request);
        }
        
        public System.Guid FileUpload(int ChatroomId, string FileName, int Responsed_UserSqlId, System.IO.Stream FileStream) {
            Client.ChatService.UploadFromChatToServer inValue = new Client.ChatService.UploadFromChatToServer();
            inValue.ChatroomId = ChatroomId;
            inValue.FileName = FileName;
            inValue.Responsed_UserSqlId = Responsed_UserSqlId;
            inValue.FileStream = FileStream;
            Client.ChatService.FileFromChatDownloadRequest retVal = ((Client.ChatService.File)(this)).FileUpload(inValue);
            return retVal.StreamId;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Client.ChatService.FileFromChatDownloadRequest> Client.ChatService.File.FileUploadAsync(Client.ChatService.UploadFromChatToServer request) {
            return base.Channel.FileUploadAsync(request);
        }
        
        public System.Threading.Tasks.Task<Client.ChatService.FileFromChatDownloadRequest> FileUploadAsync(int ChatroomId, string FileName, int Responsed_UserSqlId, System.IO.Stream FileStream) {
            Client.ChatService.UploadFromChatToServer inValue = new Client.ChatService.UploadFromChatToServer();
            inValue.ChatroomId = ChatroomId;
            inValue.FileName = FileName;
            inValue.Responsed_UserSqlId = Responsed_UserSqlId;
            inValue.FileStream = FileStream;
            return ((Client.ChatService.File)(this)).FileUploadAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Client.ChatService.DownloadFileInfo1 Client.ChatService.File.FileDownload(Client.ChatService.FileFromChatDownloadRequest request) {
            return base.Channel.FileDownload(request);
        }
        
        public string FileDownload(System.Guid StreamId, out long Length, out System.IO.Stream FileStream) {
            Client.ChatService.FileFromChatDownloadRequest inValue = new Client.ChatService.FileFromChatDownloadRequest();
            inValue.StreamId = StreamId;
            Client.ChatService.DownloadFileInfo1 retVal = ((Client.ChatService.File)(this)).FileDownload(inValue);
            Length = retVal.Length;
            FileStream = retVal.FileStream;
            return retVal.FileExtension;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Client.ChatService.DownloadFileInfo1> Client.ChatService.File.FileDownloadAsync(Client.ChatService.FileFromChatDownloadRequest request) {
            return base.Channel.FileDownloadAsync(request);
        }
        
        public System.Threading.Tasks.Task<Client.ChatService.DownloadFileInfo1> FileDownloadAsync(System.Guid StreamId) {
            Client.ChatService.FileFromChatDownloadRequest inValue = new Client.ChatService.FileFromChatDownloadRequest();
            inValue.StreamId = StreamId;
            return ((Client.ChatService.File)(this)).FileDownloadAsync(inValue);
        }
    }
}
